'#include <include/CH376.h>';

"---------------------------------------------------------------------------";
"                                                                           ";
"                       Variables en page 0                                 ";
"                                                                           ";
"---------------------------------------------------------------------------";
DEFINE * = $0A;
DECLARE R0 WORD;
DECLARE R1 ;

DEFINE LINESIZE   = $26;			" Trouver un autre label";
DEFINE VARFOUND   = $27;
DEFINE VAR_TYPE   = $28;
DEFINE ARRAY_FLAG = $2B;

DEFINE TMP_STR    = $A4;
	DEFINE TMP_STR_H = $A5;

DEFINE H91        = $91;

DEFINE VARNAME1   = $B4;
DEFINE VARNAME2   = $B5;
DEFINE VAR_ADDR   = $B6;

" Re-utilise l'emplacement de OFFSET_xxx";
DEFINE * = $05;
DECLARE Track  ;
DECLARE Head   ;
DECLARE Sector ;
DECLARE Size   ;

DEFINE * = $F7;
DECLARE CRC WORD;
	DEFINE CRC_L = CRC;
	DEFINE CRC_H = CRC_L+1;


" /!\ ATTENTION";
" Re-utilise l'emplacement de PTW";
DEFINE ZP_PTR = PTW;

"---------------------------------------------------------------------------";
"                                                                           ";
"                       Variables en page 2                                 ";
"                                                                           ";
"---------------------------------------------------------------------------";


"---------------------------------------------------------------------------";
"                                                                           ";
"                       Variables en page 4                                 ";
"                                                                           ";
"---------------------------------------------------------------------------";
" Variables FTDOS                                                           ";
"---------------------------------------------------------------------------";
DEFINE * = $048C;
DECLARE NLU;
DECLARE NP ;
DECLARE NS ;
DECLARE BUFFER_PTR WORD;

"---------------------------------------------------------------------------";
"                                                                           ";
"                   Adresses des Routines ROM v1.0                          ";
"                                                                           ";
"---------------------------------------------------------------------------";
'#if 0';
DEFINE CharGet     = $00E2;
DEFINE CharGot     = $00E8;
DEFINE GetVarFromText = $D0FC;

DEFINE FindVar     = $D158;
DEFINE FindArrayElt= $D270;
DEFINE GIVAYF      = $D3ED;
DEFINE NewStr      = $D563;
DEFINE CpyStr      = $D6F7;
DEFINE FreeStr     = $D715;
DEFINE FreeStr_04  = FreeStr+4;
DEFINE MOVMF       = $DEA5;

DEFINE EvalExpr    = $CE8B;
DEFINE SyntaxError = $CFE4;
DEFINE CheckStr    = $D712;
'#endif';

"---------------------------------------------------------------------------";
"                                                                           ";
"                   Adresses des Routines ROM v1.1                          ";
"                                                                           ";
"---------------------------------------------------------------------------";
DEFINE CharGet     = $00E2;
DEFINE CharGot     = $00E8;
DEFINE GetVarFromText = $D188;

DEFINE FindVar     = $D1E8;
DEFINE FindArrayElt= $D306;
DEFINE GIVAYF      = $D499;
DEFINE NewStr      = $D61E;
DEFINE CpyStr      = $D7B2;
DEFINE FreeStr     = $D7D0;
DEFINE FreeStr_04  = FreeStr+4;
DEFINE MOVMF       = $DEAD;

DEFINE EvalExpr    = $CF17;
DEFINE SyntaxError = $D070;
DEFINE CheckStr    = $D7CD;

"---------------------------------------------------------------------------";
"                                                                           ";
"                   Adresses des Buffers ou Tables                          ";
"                                                                           ";
"---------------------------------------------------------------------------";

"---------------------------------------------------------------------------";
"                                                                           ";
"                            Defines                                        ";
"                                                                           ";
"---------------------------------------------------------------------------";

"---------------------------------------------------------------------------";
"                                                                           ";
"                       En-tete fichier .tap                                ";
"                                                                           ";
"---------------------------------------------------------------------------";
'AUTOEXEC = 0';
'        .db $16, $16, $16, $16, $24, $ff, $ff, $80, AUTOEXEC';
'        .db >END, <END, >($9600-2), <($9600-2), $0B, "CH376-RS", $00';

"---------------------------------------------------------------------------";
"                                                                           ";
"                         Variables et buffers                              ";
"                                                                           ";
"---------------------------------------------------------------------------";
DEFINE TrackSize = 6400;

DEFINE * = $9600-2;
DATAW ReadTrack;

DECLARE BUFFER[256];
"'.dsb 256,0';";


DECLARE ER CHARACTER['ER'];
DECLARE LEN BYTE INITIAL[0];

DECLARE DNAME CHARACTER['/FTDOS.DSK'];
DATA 0;

"---------------------------------------------------------------------------";
"                                                                           ";
"                        Debut du programme                                 ";
"                                                                           ";
"---------------------------------------------------------------------------";
ReadTrack:
	CALL EvalExpr;
	CALL CheckStr;								" XY = $91-92 = Adresse de la chaine, A = Longueur";

	IF ^.Z THEN CALL _ReadTrack;

	" Code erreur -> FACC1";
	CALL GIVAYF;

	" Cherche la variable ER";
	VARNAME1 = ER[0];
	VARNAME2 = ER[1];
	CALL FindVar;

	" Change sa valeur";
	.X = .A;
	CALL MOVMF;
RETURN;

"---------------------------------------------------------------------------";
"                                                                           ";
"---------------------------------------------------------------------------";
Error:
	.Y = .A;
	CLEAR .A;
RETURN;

"---------------------------------------------------------------------------";
"                                                                           ";
"                        Routine principale                                 ";
"                                                                           ";
"---------------------------------------------------------------------------";
" Entree:                                                                   ";
"        $91-92: Adresse de la chaine                                       ";
"        A     : Longueur de la chaine                                      ";
"                                                                           ";
" Sortie:                                                                   ";
"        AY: Code erreur CH376  ($14 si Ok)                                 ";
"---------------------------------------------------------------------------";
_ReadTrack:
	LEN = .A;
	CALL InitCH376;
	IFF ^.Z THEN Error;

	"Ouverture de l'image disque";
	".A = #<DNAME;";
	".Y = #>DNAME;";
	"CALL SetFilename;";


	" TODO: Faire une fonction SetFilename2 qui saute les ' '";
	" Longeur de la chaine";
	.X = LEN;
	IF .X >=12 THEN .X = 12;

	CH376_COMMAND = $2F;
	CLEAR .Y;
	REPEAT;
	DO;
		.A = @H91[.Y];
		CH376_DATA = .A;
		INC .Y;
		DEC .X;
	END;
	UNTIL .Z;
	CH376_DATA = $00;

	CALL FileOpen;
	IFF .A ^= $14 THEN Error;

	"Offset vers la piste 20";
	.A = NP;
	CALL TrackOffset;
	CALL ByteLocate;
	IFF ^.Z THEN Error;

	.A = #<TrackSize;
	.Y = #>TrackSize;
	CALL SetByteRead;
	IFF ^.Z THEN Error;

	.A = #<BUFFER;
	.Y = #>BUFFER;

	CALL ReadUSBData;
	"IFF .Y = 0 THEN Error;";

	ZP_PTR <- BUFFER_PTR;

	CLEAR .V;

	REPEAT;
	BEGIN;
		" GAP1 / GAP4 / GAP2 / GAP5";
		"Remplacer BEQ *+5 / JMP ZZxxxx par BNE ZZxxxx";
		REPEAT;
		BEGIN;
			CALL GetByte;
			" Si fin du fichier, on force la sortie";
			IF .O THEN .A = $FE;
		END;
		UNTIL .A = $FE;

		IF ^.O THEN
		DO;
			" ID Field";
			CALL GetByte; Track  = .A;
			CALL GetByte; Head   = .A;
			CALL GetByte; Sector = .A;
			CALL GetByte; Size   = .A;
			CALL GetByte; CRC_L  = .A;
			CALL GetByte; CRC_H  = .A;

			" GAP 3";
			"Remplacer BEQ *+5 / JMP ZZxxxx par BNE ZZxxxx";
			REPEAT; CALL GetByte; UNTIL .A = $FB;

			" Data (lecture de 256 octets)";
			" Ne tient pas compte de Size";
			.Y = 0;
			REPEAT;
			BEGIN;
				CALL GetByte;
				'STA (ZP_PTR),Y';
				INC .Y;
			END;
			UNTIL .Z;

			" Data CRC";
			CALL GetByte; CRC_L = .A;
			CALL GetByte; CRC_H = .A;

			" Secteur trouvÃ©, on sort";
			IF Sector = NS THEN CALL SEV;
		END;
	END;
	UNTIL .O;

RS_End:
	CALL FileClose;

	" Si le secteur n'a pas ete trouve, on indique une erreur";
	" Sinon le code de retour est celui de FileClose soit $14";
	" normalement (a modifier eventuellement au cas ou le";
	"  FileClose se passe mal?)";
	.Y = .A;
	IF Sector ^= NS THEN .Y = $FF;

	CLEAR .A;
RETURN;

"---------------------------------------------------------------------------";
"                                                                           ";
"---------------------------------------------------------------------------";
SEV:
	'BIT *-1';
RETURN;

"---------------------------------------------------------------------------";
" TrackOffset:                                                              ";
"	Calcule l'offset d'une piste = Piste * 25 + 256                     ";
"	(6400 = 25 * 256)                                                   ";
"                                                                           ";
" Entree:                                                                   ";
" 	ACC: NÂ° de piste                                                    ";
"                                                                           ";
" Sortie:                                                                   ";
"	ACC: Poids faible du rÃ©sultat -1                                    ";
"	OFFSET: RÃ©sultat sur 16 bits                                        ";
"                                                                           ";
" Utilise:                                                                  ";
"	OFFSET: 16 bits, rÃ©sultat                                           ";
"                                                                           ";
" La valeur sur 32 bits: 0 total_h total_l 0                                ";
" Pas de dÃ©bordement sur le 4iÃ¨me octet tant que                            ";
"     le nÂ° de piste < 2622 (=65535/25)                                     ";
"                                                                           ";
" En principe tous les CLC sont inutiles                                    ";
"                                                                           ";
" Voir routine optimisÃ©e plus bas                                           ";
"---------------------------------------------------------------------------";
TrackOffset:
	" STACK A;";		" Si on ne veut pas utiliser .Y ";

	"Initialise OFFSET[]";
	.Y = 0;			" Remplacer .Y par .A si on veut conserver .Y ";
	OFFSET_0 = .Y;
	OFFSET_L = .A;
	OFFSET_H = .Y;
	OFFSET_3 = .Y;

	" x2";
	SHIFT LEFT OFFSET_L;
	ROTATE LEFT OFFSET_H;

	" +1 -> x3";
	STACK .A;
	CLEAR .C;
	.A + OFFSET_L; OFFSET_L = .A;
	IF .C THEN INC OFFSET_H;

	" x8 -> x24";
	SHIFT LEFT OFFSET_L;
	ROTATE LEFT OFFSET_H;
	SHIFT LEFT OFFSET_L;
	ROTATE LEFT OFFSET_H;
	SHIFT LEFT OFFSET_L;
	ROTATE LEFT OFFSET_H;

	" +1 -> x25";
	UNSTACK .A;
	CLEAR .C;
	.A + OFFSET_L; OFFSET_L = .A;
	IF .C THEN INC OFFSET_H;

	" +256";
	INCW OFFSET_L;

	".A = OFFSET_L";
	".Y = OFFSET_H";
RETURN;

"---------------------------------------------------------------------------";
"                          Fin du programme                                 ";
"---------------------------------------------------------------------------";
'#include "lib/CH376.s"';

EXIT;

