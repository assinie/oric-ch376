										;'#include <include/CH376.h>'; 
#include <include/CH376.h>
;---------------------------------------------------------------------------
; 
; Variables en page 0 
; 
;---------------------------------------------------------------------------
										;DEFINE * = $0A; 
	*=$0A
										;DECLARE R0 WORD; 
	R0  *=*+2
										;DECLARE R1 ; 
	R1  *=*+1
										;DEFINE LINESIZE = $26; " Trouver un autre label"; 
	LINESIZE=$26
										;DEFINE VARFOUND = $27; 
	VARFOUND=$27
										;DEFINE VAR_TYPE = $28; 
	VAR_TYPE=$28
										;DEFINE ARRAY_FLAG = $2B; 
	ARRAY_FLAG=$2B
										;DEFINE TMP_STR = $A4; 
	TMP_STR=$A4
										; DEFINE TMP_STR_H = $A5; 
	TMP_STR_H=$A5
										;DEFINE H91 = $91; 
	H91=$91
										;DEFINE VARNAME1 = $B4; 
	VARNAME1=$B4
										;DEFINE VARNAME2 = $B5; 
	VARNAME2=$B5
										;DEFINE VAR_ADDR = $B6; 
	VAR_ADDR=$B6
; Re-utilise l'emplacement de OFFSET_xxx
										;DEFINE * = $05; 
	*=$05
										;DECLARE Track ; 
	Track  *=*+1
										;DECLARE Head ; 
	Head  *=*+1
										;DECLARE Sector ; 
	Sector  *=*+1
										;DECLARE Size ; 
	Size  *=*+1
										;DEFINE * = $F7; 
	*=$F7
										;DECLARE CRC WORD; 
	CRC  *=*+2
										; DEFINE CRC_L = CRC; 
	CRC_L=CRC 
										; DEFINE CRC_H = CRC_L+1; 
	CRC_H=CRC_L+1
; / \ ATTENTION
; Re-utilise l'emplacement de PTW
										;DEFINE ZP_PTR = PTW; 
ZP_PTR=PTW 
;---------------------------------------------------------------------------
; 
; Variables en page 2 
; 
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
; 
; Variables en page 4 
; 
;---------------------------------------------------------------------------
; Variables FTDOS 
;---------------------------------------------------------------------------
										;DEFINE * = $048C; 
	*=$048C
										;DECLARE NLU; 
	NLU  *=*+1
										;DECLARE NP ; 
	NP  *=*+1
										;DECLARE NS ; 
	NS  *=*+1
										;DECLARE BUFFER_PTR WORD; 
	BUFFER_PTR  *=*+2
;---------------------------------------------------------------------------
; 
; Adresses des Routines ROM v1.0 
; 
;---------------------------------------------------------------------------
										;'#if 0'; 
#if 0
										;DEFINE CharGet = $00E2; 
	CharGet=$00E2
										;DEFINE CharGot = $00E8; 
	CharGot=$00E8
										;DEFINE GetVarFromText = $D0FC; 
	GetVarFromText=$D0FC
										;DEFINE FindVar = $D158; 
	FindVar=$D158
										;DEFINE FindArrayElt= $D270; 
	FindArrayElt=$D270
										;DEFINE GIVAYF = $D3ED; 
	GIVAYF=$D3ED
										;DEFINE NewStr = $D563; 
	NewStr=$D563
										;DEFINE CpyStr = $D6F7; 
	CpyStr=$D6F7
										;DEFINE FreeStr = $D715; 
	FreeStr=$D715
										;DEFINE FreeStr_04 = FreeStr+4; 
	FreeStr_04=FreeStr+4
										;DEFINE MOVMF = $DEA5; 
	MOVMF=$DEA5
										;DEFINE EvalExpr = $CE8B; 
	EvalExpr=$CE8B
										;DEFINE SyntaxError = $CFE4; 
	SyntaxError=$CFE4
										;DEFINE CheckStr = $D712; 
	CheckStr=$D712
										;'#endif'; 
#endif
;---------------------------------------------------------------------------
; 
; Adresses des Routines ROM v1.1 
; 
;---------------------------------------------------------------------------
										;DEFINE CharGet = $00E2; 
	CharGet=$00E2
										;DEFINE CharGot = $00E8; 
	CharGot=$00E8
										;DEFINE GetVarFromText = $D188; 
	GetVarFromText=$D188
										;DEFINE FindVar = $D1E8; 
	FindVar=$D1E8
										;DEFINE FindArrayElt= $D306; 
	FindArrayElt=$D306
										;DEFINE GIVAYF = $D499; 
	GIVAYF=$D499
										;DEFINE NewStr = $D61E; 
	NewStr=$D61E
										;DEFINE CpyStr = $D7B2; 
	CpyStr=$D7B2
										;DEFINE FreeStr = $D7D0; 
	FreeStr=$D7D0
										;DEFINE FreeStr_04 = FreeStr+4; 
	FreeStr_04=FreeStr+4
										;DEFINE MOVMF = $DEAD; 
	MOVMF=$DEAD
										;DEFINE EvalExpr = $CF17; 
	EvalExpr=$CF17
										;DEFINE SyntaxError = $D070; 
	SyntaxError=$D070
										;DEFINE CheckStr = $D7CD; 
	CheckStr=$D7CD
;---------------------------------------------------------------------------
; 
; Adresses des Buffers ou Tables 
; 
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
; 
; Defines 
; 
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
; 
; En-tete fichier .tap 
; 
;---------------------------------------------------------------------------
										;'AUTOEXEC = 0'; 
	AUTOEXEC= 0
										;' .db $16, $16, $16, $16, $24, $ff, $ff, $80, AUTOEXEC'; 
	 .db $16, $16, $16, $16, $24, $ff, $ff, $80, AUTOEXEC
										;' .db >END, <END, >($9700-2), <($9700-2), $0B, "CH376-RS", $00'; 
	 .db >END, <END, >($9700-2), <($9700-2), $0B, "CH376-RS", $00
;---------------------------------------------------------------------------
; 
; Variables et buffers 
; 
;---------------------------------------------------------------------------
										;DEFINE TrackSize = 6400; 
	TrackSize=6400
										;DEFINE * = $9700-2;
	*=$9700-2
										;DATAW ReadSector;
	.WORD ReadSector
										;DECLARE BUFFER[256]; 
	BUFFER  .dsb 256,0
;'.dsb 256,0';
										;DECLARE ER CHARACTER['ER']; 
	ER .BYT 'ER'
										;DECLARE LEN BYTE INITIAL[0]; 
	LEN .BYT 0
										;DECLARE DNAME CHARACTER['/FTDOS.DSK']; 
	DNAME .BYT '/FTDOS.DSK'
										;DATA 0; 
	.BYT 0
;---------------------------------------------------------------------------
; 
; Debut du programme 
; 
;---------------------------------------------------------------------------
										;ReadSector:
	ReadSector
										; CALL EvalExpr; 
	JSR EvalExpr 
										; CALL CheckStr; " XY = $91-92 = Adresse de la chaine, A = Longueur"; 
	JSR CheckStr 
										; IF ^.Z THEN CALL _ReadSector;
	BEQ ZZ0001 
	JSR _ReadSector
	; Code erreur -> FACC1
ZZ0001
										; CALL GIVAYF; 
	JSR GIVAYF 
	; Cherche la variable ER
										; VARNAME1 = ER[0]; 
	LDA 0+ER 
	STA VARNAME1 
										; VARNAME2 = ER[1]; 
	LDA 1+ER 
	STA VARNAME2 
										; CALL FindVar; 
	JSR FindVar 
	; Change sa valeur
										; .X = .A; 
	TAX
										; CALL MOVMF; 
	JSR MOVMF 
										;RETURN; 
	RTS 
;---------------------------------------------------------------------------
; 
;---------------------------------------------------------------------------
										;Error: 
	Error 
										; .Y = .A; 
	TAY
										; CLEAR .A; 
	LDA #0
										;RETURN; 
	RTS 
;---------------------------------------------------------------------------
; 
; Routine principale 
; 
;---------------------------------------------------------------------------
; Entree: 
; $91-92: Adresse de la chaine 
; A : Longueur de la chaine 
; 
; Sortie: 
; AY: Code erreur CH376 ($14 si Ok) 
;---------------------------------------------------------------------------
										;_ReadSector:
	_ReadSector
										; LEN = .A; 
	STA LEN 
										; CALL InitCH376; 
	JSR InitCH376 
										; IFF ^.Z THEN Error; 
	BNE Error 
	;Ouverture de l'image disque
	;.A = #<DNAME;
	;.Y = #>DNAME;
	;CALL SetFilename;
	; TODO: Faire une fonction SetFilename2 qui saute les ' '
	; Longeur de la chaine
										; .X = LEN; 
	LDX LEN 
										; IF .X >=12 THEN .X = 12; 
	CPX #12
	BCS  *+5
	JMP ZZ0002 
	LDX #12
										; CH376_COMMAND = $2F; 
ZZ0002
	LDA #$2F
	STA CH376_COMMAND 
										; CLEAR .Y; 
	LDY #0
										; REPEAT; 
ZZ0003
										; DO; 
										; .A = @H91[.Y]; 
	LDA (H91),Y
										; CH376_DATA = .A; 
	STA CH376_DATA 
										; INC .Y; 
	INY
										; DEC .X; 
	DEX
										; END; 
										; UNTIL .Z; 
	BNE ZZ0003 
										; CH376_DATA = $00; 
	LDA #$00
	STA CH376_DATA 
										; CALL FileOpen; 
	JSR FileOpen 
										; IFF .A ^= $14 THEN Error; 
	CMP #$14
	BNE Error 
	;Offset vers la piste 20
										; .A = NP; 
	LDA NP 
										; CALL TrackOffset; 
	JSR TrackOffset 
										; CALL ByteLocate; 
	JSR ByteLocate 
										; IFF ^.Z THEN Error; 
	BNE Error 
										; .A = #<TrackSize; 
	LDA #<TrackSize 
										; .Y = #>TrackSize; 
	LDY #>TrackSize 
										; CALL SetByteRead; 
	JSR SetByteRead 
										; IFF ^.Z THEN Error; 
	BNE Error 
										; .A = #<BUFFER; 
	LDA #<BUFFER 
										; .Y = #>BUFFER; 
	LDY #>BUFFER 
										; CALL ReadUSBData; 
	JSR ReadUSBData 
	;IFF .Y = 0 THEN Error;
										; ZP_PTR <- BUFFER_PTR; 
	LDA BUFFER_PTR 
	STA ZP_PTR 
	LDA BUFFER_PTR+1
	STA ZP_PTR+1
										; CLEAR .V; 
	CLV
										; REPEAT; 
ZZ0004
										; BEGIN; 
	; GAP1 / GAP4 / GAP2 / GAP5
	;Remplacer BEQ *+5 / JMP ZZxxxx par BNE ZZxxxx
										; REPEAT; 
ZZ0005
										; BEGIN; 
										; CALL GetByte; 
	JSR GetByte 
	; Si fin du fichier, on force la sortie
										; IF .O THEN .A = $FE; 
	BVC ZZ0006 
	LDA #$FE
										; END; 
ZZ0006
										; UNTIL .A = $FE; 
	CMP #$FE
	BEQ  *+5
	JMP ZZ0005 
										; IF ^.O THEN 
	BVS ZZ0007 
										; DO; 
	; ID Field
										; CALL GetByte; Track = .A; 
	JSR GetByte 
	STA Track 
										; CALL GetByte; Head = .A; 
	JSR GetByte 
	STA Head 
										; CALL GetByte; Sector = .A; 
	JSR GetByte 
	STA Sector 
										; CALL GetByte; Size = .A; 
	JSR GetByte 
	STA Size 
										; CALL GetByte; CRC_L = .A; 
	JSR GetByte 
	STA CRC_L 
										; CALL GetByte; CRC_H = .A; 
	JSR GetByte 
	STA CRC_H 
	; GAP 3
	;Remplacer BEQ *+5 / JMP ZZxxxx par BNE ZZxxxx
										; REPEAT; CALL GetByte; UNTIL .A = $FB; 
ZZ0008
	JSR GetByte 
	CMP #$FB
	BEQ  *+5
	JMP ZZ0008 
	; Data (lecture de 256 octets)
	; Ne tient pas compte de Size
										; .Y = 0; 
	LDY #0
										; REPEAT; 
ZZ0009
										; BEGIN; 
										; CALL GetByte; 
	JSR GetByte 
										; 'STA (ZP_PTR),Y'; 
	STA (ZP_PTR),Y
										; INC .Y; 
	INY
										; END; 
										; UNTIL .Z; 
	BNE ZZ0009 
	; Data CRC
										; CALL GetByte; CRC_L = .A; 
	JSR GetByte 
	STA CRC_L 
										; CALL GetByte; CRC_H = .A; 
	JSR GetByte 
	STA CRC_H 
	; Secteur trouve, on sort
										; IF Sector = NS THEN CALL SEV; 
	LDA NS 
	CMP Sector 
	BEQ  *+5
	JMP ZZ0010 
	JSR SEV 
										; END; 
ZZ0010
										; END; 
ZZ0007
										; UNTIL .O; 
	BVC ZZ0004 
										;RS_End: 
	RS_End 
										; CALL FileClose; 
	JSR FileClose 
	; Si le secteur n'a pas ete trouve, on indique une erreur
	; Sinon le code de retour est celui de FileClose soit $14
	; normalement (a modifier eventuellement au cas ou le
	; FileClose se passe mal?)
										; .Y = .A; 
	TAY
										; IF Sector ^= NS THEN .Y = $FF; 
	LDA NS 
	CMP Sector 
	BNE  *+5
	JMP ZZ0011 
	LDY #$FF
										; CLEAR .A; 
ZZ0011
	LDA #0
										;RETURN; 
	RTS 
;---------------------------------------------------------------------------
; 
;---------------------------------------------------------------------------
										;SEV: 
	SEV 
										; 'BIT *-1'; 
	BIT *-1
										;RETURN; 
	RTS 
;---------------------------------------------------------------------------
; TrackOffset: 
; Calcule l'offset d'une piste = Piste * 25 + 256 
; (6400 = 25 * 256) 
; 
; Entree: 
; ACC: N? de piste 
; 
; Sortie: 
; ACC: Poids faible du resultat -1 
; OFFSET: Resultat sur 16 bits 
; 
; Utilise: 
; OFFSET: 16 bits, resultat 
; 
; La valeur sur 32 bits: 0 total_h total_l 0 
; Pas de debordement sur le 4ieme octet tant que 
; le n? de piste < 2622 (=65535/25) 
; 
; En principe tous les CLC sont inutiles 
; 
; Voir routine optimisee plus bas 
;---------------------------------------------------------------------------
										;TrackOffset: 
	TrackOffset 
	; STACK A;"; " Si on ne veut pas utiliser .Y 
	;Initialise OFFSET[]
										; .Y = 0; " Remplacer .Y par .A si on veut conserver .Y "; 
	LDY #0
										; OFFSET_0 = .Y; 
	STY OFFSET_0 
										; OFFSET_L = .A; 
	STA OFFSET_L 
										; OFFSET_H = .Y; 
	STY OFFSET_H 
										; OFFSET_3 = .Y; 
	STY OFFSET_3 
	; x2
										; SHIFT LEFT OFFSET_L; 
	ASL OFFSET_L 
										; ROTATE LEFT OFFSET_H; 
	ROL OFFSET_H 
	; +1 -> x3
										; STACK .A; 
	PHA
										; CLEAR .C; 
	CLC
										; .A + OFFSET_L; OFFSET_L = .A; 
	ADC OFFSET_L 
	STA OFFSET_L 
										; IF .C THEN INC OFFSET_H; 
	BCC ZZ0012 
	INC OFFSET_H 
	; x8 -> x24
ZZ0012
										; SHIFT LEFT OFFSET_L; 
	ASL OFFSET_L 
										; ROTATE LEFT OFFSET_H; 
	ROL OFFSET_H 
										; SHIFT LEFT OFFSET_L; 
	ASL OFFSET_L 
										; ROTATE LEFT OFFSET_H; 
	ROL OFFSET_H 
										; SHIFT LEFT OFFSET_L; 
	ASL OFFSET_L 
										; ROTATE LEFT OFFSET_H; 
	ROL OFFSET_H 
	; +1 -> x25
										; UNSTACK .A; 
	PLA
										; CLEAR .C; 
	CLC
										; .A + OFFSET_L; OFFSET_L = .A; 
	ADC OFFSET_L 
	STA OFFSET_L 
										; IF .C THEN INC OFFSET_H; 
	BCC ZZ0013 
	INC OFFSET_H 
	; +256
ZZ0013
										; INCW OFFSET_L; 
	INC OFFSET_L 
	BNE ZZ0014 
	INC OFFSET_L+1
ZZ0014
	;.A = OFFSET_L
	;.Y = OFFSET_H
										;RETURN; 
	RTS 
;---------------------------------------------------------------------------
; Fin du programme 
;---------------------------------------------------------------------------
										;'#include "lib/CH376.s"'; 
#include "lib/CH376.s"
										;EXIT; 
	END
